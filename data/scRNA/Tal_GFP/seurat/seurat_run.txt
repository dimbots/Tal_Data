library(dplyr)
library(Seurat)
library(patchwork)

# CREATE OBJECT Lgr5Cre_SETDB1KO

# Load dataset A (Object A)
Lgr5Cre_Setdb1KO_A.data=Read10X(data.dir = "/media/dimbo/10T/data/talianidis_data/scRNA_Seq/Talianidis_GFP_2_fixed/Merge_Samples/cellranger/cellranger_count/21L004866/run_count_21L004866/outs/filtered_feature_bc_matrix/")
Lgr5Cre_Setdb1KO_A = CreateSeuratObject(counts = Lgr5Cre_Setdb1KO_A.data, project = "Setdb1KO A", min.cells = 3, min.features = 200)
# Load dataset B (Object B)
Lgr5Cre_Setdb1KO_B.data <- Read10X(data.dir = "/media/dimbo/10T/data/talianidis_data/scRNA_Seq/Talianidis_GFP_2_fixed/Merge_Samples/cellranger/cellranger_count/21L004870/run_count_21L004870/outs/filtered_feature_bc_matrix/")
Lgr5Cre_Setdb1KO_B = CreateSeuratObject(counts = Lgr5Cre_Setdb1KO_B.data, project = "Setdb1KO B", min.cells = 3, min.features = 200)
# Merge objects
Lgr5Cre_Setdb1KO=merge(Lgr5Cre_Setdb1KO_A, y=Lgr5Cre_Setdb1KO_B, add.cell.ids=c("Rep_A","Rep_B"), project="Lgr5Cre_Setdb1KO")

# CREATE OBJECT LGR5Cre_WT

# Load dataset A (Object A)
Lgr5Cre_WT_A.data=Read10X(data.dir = "/media/dimbo/10T/data/talianidis_data/scRNA_Seq/Talianidis_GFP_2_fixed/Merge_Samples/cellranger/cellranger_count/21L004858/run_count_21L004858/outs/filtered_feature_bc_matrix/")
Lgr5Cre_WT_A = CreateSeuratObject(counts = Lgr5Cre_WT_A.data, project = "Lgr5Cre A", min.cells = 3, min.features = 200)
# Load dataset B (Object B)
Lgr5Cre_WT_B.data <- Read10X(data.dir = "/media/dimbo/10T/data/talianidis_data/scRNA_Seq/Talianidis_GFP_2_fixed/Merge_Samples/cellranger/cellranger_count/21L004862/run_count_21L004862/outs/filtered_feature_bc_matrix/")
Lgr5Cre_WT_B = CreateSeuratObject(counts = Lgr5Cre_WT_B.data, project = "Lgr5Cre B", min.cells = 3, min.features = 200)
# Merge objects
Lgr5Cre_WT=merge(Lgr5Cre_WT_A, y=Lgr5Cre_WT_B, add.cell.ids=c("Rep_A","Rep_B"), project="Lgr5Cre_WT")

####################################################################################################################################

# Merge Setdb1KO with WT to new object Lgr5Cre_MERGED
Lgr5Cre_MERGED=merge(Lgr5Cre_Setdb1KO, y=Lgr5Cre_WT, add.cell.ids=c("Setdb1KO","Lgr5Cre"), project="Lgr5Cre_MERGED")

# Change replicates names within object. e.g(Setdb1KO_repA & Setdb1KO_repB -> Setdb1KO)
Lgr5Cre_MERGED$orig.ident=plyr::mapvalues(x=Lgr5Cre_MERGED$orig.ident, from = c("Setdb1KO A", "Setdb1KO B", "Lgr5Cre A", "Lgr5Cre B"), to = c("Setdb1KO", "Setdb1KO", "Lgr5Cre", "Lgr5Cre"))

##########################################################################################

# QC and selecting cells
Lgr5Cre_MERGED[["percent.mt"]] <- PercentageFeatureSet(Lgr5Cre_MERGED, pattern = "^mt-")


# Violin Plot
pdf("violin_plot_Lgr5Cre.pdf", width=18, height=10)
VlnPlot(Lgr5Cre_MERGED, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()

# Violin Plot with merged replicates
pdf("violin_plot_Lgr5Cre_merged.pdf", width=18, height=10)
VlnPlot(Lgr5Cre_MERGED, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "orig.ident", ncol = 3)
dev.off()

# Feature Scatter Plot
plot1 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pdf("feauture_scatter.pdf", width=15, height=8)
plot1 + plot2
dev.off()

# Feature Scatter Plot
plot1 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "percent.mt", group.by = "orig.ident")
plot2 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
pdf("feauture_scatter_merged.pdf", width=15, height=8)
plot1 + plot2
dev.off()

# Filtering cells 
Lgr5Cre_MERGED <- subset(Lgr5Cre_MERGED, subset = nFeature_RNA > 200 & nFeature_RNA < 3500 & percent.mt < 5)

# Normalize the data
Lgr5Cre_MERGED <- NormalizeData(Lgr5Cre_MERGED, normalization.method = "LogNormalize", scale.factor = 10000)

# Identification of highly variable features
Lgr5Cre_MERGED <- FindVariableFeatures(Lgr5Cre_MERGED, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(Lgr5Cre_MERGED), 10)

# Plot variable features
pdf("variable_features_Lgr5Cre.pdf", width=15, height=8)
plot1 <- VariableFeaturePlot(Lgr5Cre_MERGED)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
dev.off()

# Scaling the data
all.genes <- rownames(Lgr5Cre_MERGED)
Lgr5Cre_MERGED <- ScaleData(Lgr5Cre_MERGED, features = all.genes)

# Performing linear dimensional reduction
Lgr5Cre_MERGED <- RunPCA(Lgr5Cre_MERGED, features = VariableFeatures(object = Lgr5Cre_MERGED))
print(Lgr5Cre_MERGED[["pca"]], dims = 1:5, nfeatures = 5)

# VizDim Plot
pdf("Viz_DimPlot_PCA_Lgr5Cre.pdf", width=15, height=8)
VizDimLoadings(Lgr5Cre_MERGED, dims = 1:2, reduction = "pca")
dev.off()

# DimPlot
pdf("DimPlot_PCA_Lgr5Cre.pdf", width=15, height=8)
VizDimLoadings(Lgr5Cre_MERGED, dims = 1:2, reduction = "pca")
dev.off()

# Dim Heatmap
pdf("DimHeatmap_Lgr5Cre.pdf", width=15, height=8)
DimHeatmap(Lgr5Cre_MERGED, dims = 1, cells = 500, balanced = TRUE)
dev.off()

# Determine the dimensionality of the dataset
Lgr5Cre_MERGED <- JackStraw(Lgr5Cre_MERGED, num.replicate = 100)
Lgr5Cre_MERGED <- ScoreJackStraw(Lgr5Cre_MERGED, dims = 1:20)

pdf("JackstrawPlot_Lgr5Cre.pdf", width=15, height=8)
JackStrawPlot(Lgr5Cre_MERGED, dims = 1:15)
dev.off()

pdf("ElbowPlot_Lgr5Cre.pdf", width=15, height=8)
ElbowPlot(Lgr5Cre_MERGED)
dev.off()

# Cluster the Cells
Lgr5Cre_MERGED <- FindNeighbors(Lgr5Cre_MERGED, dims = 1:10)
Lgr5Cre_MERGED <- FindClusters(Lgr5Cre_MERGED, resolution = 0.5)

# Run non linear dimensional reduction
reticulate::py_install(packages = 'umap-learn')
Lgr5Cre_MERGED <- RunUMAP(Lgr5Cre_MERGED, dims = 1:10)

# Umap plot
pdf("umapPlot_Lgr5Cre.pdf", width=15, height=8)
DimPlot(Lgr5Cre_MERGED, reduction = "umap")
dev.off()

# Umap plot merged
pdf("umapPlot_Lgr5Cre_merged.pdf", width=15, height=8)
DimPlot(Lgr5Cre_MERGED, reduction = "umap", group.by = "orig.ident")
dev.off()

# Split objects 
SplitObject(Lgr5Cre_MERGED, split.by = "ident")
n_cells=(FetchData(Lgr5Cre_MERGED, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

# Umap plot merged replicates per condition
pdf("umapPlot_Lgr5Cre_merged2.pdf", width=15, height=8)
DimPlot(Lgr5Cre_MERGED,label=TRUE, split.by="orig.ident") + NoLegend()
dev.off()

# Feauture plot top 10 genes
pdf("feature_plot_top_10_MostVariantGenes.pdf", width=15, height=8)
FeaturePlot(Lgr5Cre_MERGED, features = top10)
dev.off()

# Violin plot top 10 genes
pdf("VlnPlot_per_top_MostVariantGenes.pdf", width=15, height=8)
VlnPlot(Lgr5Cre_MERGED, features = top10)
dev.off()

# Dot plot per top 10 genes
pdf("DotPlot_Lgr5cre.pdf", width=15, height=8)
DotPlot(Lgr5Cre_MERGED, cols = c("blue", "orange"), group.by = "orig.ident", features = top10)
dev.off()

# Dot plot per selected Markers
#pdf("DotPlot_Lgr5cre_MERGED_orig.ident_MARKERS_TOP10.pdf", width=15, height=8)
#DotPlot(Lgr5Cre_MERGED, features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8", "Elf3", "Sis", "Fabp1", "Hnf4a", "Tmigd1", "Fabp6"), split.by = "orig.ident")
#dev.off()


# Count cells per cluster per condition
library(data.table)
library(magrittr)

# Extract metadata
md = Lgr5Cre_MERGED@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]
md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")


# Find all markers distinguishing cluster 0 from the rest of the clusters
cluster0.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 0, ident.2 = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster1.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 1, ident.2 = c(0,2,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster2.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 2, ident.2 = c(0,1,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster3.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 3, ident.2 = c(0,1,2,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster4.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 4, ident.2 = c(0,1,2,3,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster5.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 5, ident.2 = c(0,1,2,3,4,6,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster6.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 6, ident.2 = c(0,1,2,3,4,5,7,8,9,10,11,12,13,14), min.pct = 0.25)
cluster7.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 7, ident.2 = c(0,1,2,3,4,5,6,8,9,10,11,12,13,14), min.pct = 0.25)
cluster8.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 8, ident.2 = c(0,1,2,3,4,5,6,7,9,10,11,12,13,14), min.pct = 0.25)
cluster9.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 9, ident.2 = c(0,1,2,3,4,5,6,7,8,10,11,12,13,14), min.pct = 0.25)
cluster10.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 10, ident.2 = c(0,1,2,3,4,5,6,7,8,9,11,12,13,14), min.pct = 0.25)
cluster11.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 11, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,12,13,14), min.pct = 0.25)
cluster12.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 12, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,13,14), min.pct = 0.25)
cluster13.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 13, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,12,14), min.pct = 0.25)
cluster14.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 14, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13), min.pct = 0.25)


# DotPlots per Markers
p =  DotPlot(Lgr5Cre_MERGED,features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8"),cols = c("blue","orange"))
p + ggtitle("Enterocyte Immature Markers") + RotatedAxis()

p = DotPlot(Lgr5Cre_MERGED,features = c("Elf3","Sis","Fabp1","Hnf4aos","Hnf4a", "Hnf4g", "Tmigd1","Fabp6","Slc51b","Slc51a","Mep1a","Fam151a","Naaladl1","Slc34a2","Plb1","Nudt4","Dpep1","Pmp22","Xpnpep2","Muc3","Neu1","Clec2h","Phgr1","Prss30","Aldob","Alpi","Apoa1","Apoa4","Lct"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Mature Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Ccnb1","Cdc20","Cenpa","Cdkn3","Cdc25c","Ccnb2","Kif22","Ube2c","Sapcd2","Rbp7","Ccna2","Aurka","Cdkn2d","Kif23","Nek2","Birc5","Plk1","Tacc3","Melk","Cps1"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Progenitor Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Muc2","Spdef","Foxa1","Agr2","Spink4","Fcgbp","Tff3","Zg16","Clca1","Ccl6","Klk1","Tpsg1","Ccl9","Txndc5","Tspan13","Atoh1","Lrrc26","Clca3a1","Klf4"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Goblet Markers")


p = DotPlot(Lgr5Cre_MERGED,features = c("Lyz1","Mmp7","Dll4","Sox9","Gfi1","Gm14851","Defa21","Defa22","Defa17","Defa24","Defa3","Mptx2","Ang4"),cols = c("blue","orange")) + RotatedAxis()
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p + ggtitle("Paneth Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Gfi1","Neurog3","Neurod1","Chga","Chgb","Isl1","Arx","Pax6","Foxa2","Sst","Gck","Gcg","Tph1","Pyy","Gfra3","Cpe","Tac1","Fam183b", "Hmgn3","Cck","Fev","Gch1","Pcsk1n", "Bex2","Vwa5b2","Nkx2-2","Marcksl1","Neurod2","Insm1"),cols = c("blue","orange")) + RotatedAxis()
# Gene Ngfrap1 excluded. It can not be found in the dataset
p + ggtitle("Enteroendocrine Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Lgr5","Ascl2","Olfm4","Prom1","Axin2","Fzd2","Fzd7","Lrp5","Lrp6","Notch1","Hes1","Smo","Yap1","Igfbp4","Bex1","Gkn3","Slc12a2"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Stem Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Dclk1","Ptprc","Avil","Lrmp","Alox5ap","Rgs13","Sh2d6","Ltc4s","Hck","Cd24a","Trpm5","Kctd12","Aldh2","Il13ra1","Gng13","Tmem176a","Skap2","Ptpn6","Ly6g6f","Fyb","Adh1","Gfi1b","Il25"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Tuft Markers")

p = DotPlot(Lgr5Cre_MERGED,features = c("Stmn1", "Tubb5"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("TA Markers")











